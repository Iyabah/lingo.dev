name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Fetch all history for Changesets version calculation
          fetch-depth: 0

      - name: Debug Permissions
        run: |
          ls -la
          ls -la integrations/
          ls -la integrations/directus/

      - name: Check for [skip i18n]
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MESSAGE" | grep -iq 
\[skip i18n\]
; then
            echo "Skipping i18n checks due to [skip i18n] in commit message."
            exit 0
          fi

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.20.4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        id: pnpm-install
        with:
          version: 9.12.3
          run_install: false

      # Add PHP Setup
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1" # Match composer.json requirement
          extensions: mbstring, xml, ctype, dom, curl, gmp # Add extensions needed by SDK and dependencies
          tools: composer # Install composer

      # Cache pnpm
      - name: Configure pnpm cache
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Cache pnpm store
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles(
**/pnpm-lock.yaml
) }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # Cache Composer
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Cache Composer dependencies
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles(
**/composer.lock
) }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Node deps
        run: pnpm install

      # Install PHP deps (Composer install might be triggered by pnpm install via script, but explicit is safer)
      - name: Install PHP deps
        run: cd packages/php && composer install --prefer-dist --no-progress --no-interaction

      - name: Lingo.dev
        uses: ./
        with:
          api-key: ${{ secrets.LINGODOTDEV_API_KEY }}
          pull-request: true
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Setup
        run: |
          pnpm turbo telemetry disable

      - name: Configure Turbo cache
        uses: dtinth/setup-github-actions-caching-for-turbo@v1

      - name: Build
        run: pnpm turbo build --force

      - name: Test JS/TS
        run: pnpm turbo test --force

      # Add PHP Test Step
      - name: Test PHP
        run: cd packages/php && composer test

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          title: "chore: bump package versions"
          version: pnpm changeset version # This runs versioning based on changeset files
          publish: pnpm changeset publish # This attempts to publish versioned packages (npm by default)
          commit: "chore: bump package version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }} # For npm packages

      # Add Conditional Packagist Publish Step
      - name: Notify Packagist of Update
        # Only run if changesets/action published something AND the php-sdk was one of them
        if: steps.changesets.outputs.published == "true" && contains(steps.changesets.outputs.publishedPackages, "\"name\":\"@lingodotdev/php-sdk\"")
        run: |
          echo "PHP SDK was published by Changesets, notifying Packagist..."
          curl -XPOST -H"content-type:application/json" \
          "https://packagist.org/api/update-package?username=lingodotdev&apiToken=${{ secrets.PACKAGIST_API_TOKEN }}" \
          -d"{\"repository\":{\"url\":\"https://github.com/lingodotdev/lingo.dev\"}}" \
          --fail # Fail the step if curl fails

